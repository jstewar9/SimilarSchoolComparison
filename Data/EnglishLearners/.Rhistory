df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "Yes, some of the time"] <- 2; x})
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "Yes, most of the time"] <- 3; x})
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "Yes, all of the time"] <- 4; x})
# Re-code grade level
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "5th grade"] <- "05"; x})
# Convert to data frame
df_cces_responses <- as.data.frame(df_cces_responses
, stringsAsFactors = FALSE)
# Re-code timestamp to MM/DD/YYYY
df_cces_responses$RESPONSE_DATE = ""
for (i in 1:length(df_cces_responses$Timestamp)){
# Find position of space between date and time
pos_space <- regexpr(" ", df_elem$Timestamp[i], fixed = TRUE)
# Extract date
df_cces_responses$RESPONSE_DATE[i] <- substring(df_elem$Timestamp[i], 1, pos_space - 1)
}
# Clean up
rm(i, pos_space)
#--------------------------------------------------
# Join SSIDs to survey responses
#--------------------------------------------------
# Drop unecessary coluns from SSID data frame
df_ssid <- subset(df_ssid
, select = c("Email", "SSID"))
# Rename email address column from responses data
names(df_cces_responses)[names(df_cces_responses)=="Email Address"] <- "Email"
# Join SSIDs using email address
df_cces_responses <- merge(df_cces_responses
, df_ssid
, by = "Email"
, all.x = TRUE)
#--------------------------------------------------
# Move columns to fit CCESS file spec from CORE dictionary
#--------------------------------------------------
# Create empty data frame
df_cces_upload <- data.frame(matrix(NA
, nrow = length(df_cces_responses$Email)
, ncol = length(df_cces_dictionary$COLUMN_HEADER)))
# Name columns
names(df_cces_upload) <- c(df_cces_dictionary$COLUMN_HEADER)
# Fill in data
df_cces_upload$SURVEY_CODE <- "CC_ES_1718"
df_cces_upload$RESPONDENT_ID <- df_cces_responses$SSID
df_cces_upload$RESPONDENT_GRADE <- df_cces_responses$`What grade are you in?`
df_cces_upload$SCHOOL_CODE <- "0124172"
# Find matching columns
v_match_col <- match(names(df_cces_upload), names(df_cces_responses))
# For matching columns, copy data from responses data frame to upload data frame
for (i in 1:length(v_match_col)){
ifelse(is.na(v_match_col[i])
, print("No Match")
, df_cces_upload[, i] <- df_cces_responses[, v_match_col[i]])
}
rm(i, v_match_col)
# Find matching columns
v_match_col <- match(names(df_cces_upload), names(df_cces_responses))
v_mathc_col
v_match_col
#Re-shape Yu Ming's CORE SEL from Google Forms into for uploading into CORE system
#Clear console
cat("\014")
#Clear memory
rm(list=ls())
gc()
#Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(googlesheets, tidyr, dplyr, httpuv, fuzzywuzzyR)
#Import CORE data dictionary
gs_core_dictionary <- gs_title("ea_core_data_dictionary_clean")
df_cces_dictionary <- as.data.frame(gs_read(ss = gs_core_dictionary, ws = "CCES", range = "A1:J45"))
#df_cchs_dictionary <- as.data.frame(gs_read(ss = gs_core_dictionary, ws = "CCHS", range = "A1:J48"))
#df_selstu_dictionary <- as.data.frame(gs_read(ss = gs_core_dictionary, ws = "SELSTU", range = "A1:J46"))
#Import state student ids
gs_ssid <- gs_title("YuMing_SurveyData_Reshaped")
df_ssid <- as.data.frame(gs_read(ss = gs_ssid, ws = "RespondentList", range = cell_cols("A:E")))
#Import Elementary data
gs_elem <- gs_title("Yu Ming (Primary) Student Survey - Winter 2017-18 (Responses)")
df_elem <- as.data.frame(gs_read(ss = gs_elem, ws = "Form Responses 1", range = cell_cols("A:AY")))
#Import Secondary
#gs_sec <- gs_title("Yu Ming (Secondary) Student Survey - Winter 2017-18 (Responses)")
#df_sec <- as.data.frame(gs_read(ss = gs_sec, ws = "Form Responses 1", range = cell_cols("A:BB")))
# Clean up
rm(list = ls()[grepl("gs", ls())])
#--------------------------------------------------
# Elementary Climate Culture (CC_ES)
#--------------------------------------------------
# Import column headers and question text from CORE data dictionary
df_cces_questions <- df_cces_dictionary[21:length(df_cces_dictionary$COLUMN_HEADER), ]
df_cces_questions <- subset(df_cces_questions
, select = c("COLUMN_HEADER", "PUBLIC_NAME"))
cces_question_cnt <- length(df_cces_questions$PUBLIC_NAME)
# Determine columns from goolge form that are related to elem culture climate survey
v_cces_columns <- vector(mode = "integer"
, length = length(df_cces_questions$PUBLIC_NAME))
for (i in 1:length(df_cces_questions$PUBLIC_NAME)){
# Returns column number of closest match
v_cces_columns[i] <- agrep(df_cces_questions$PUBLIC_NAME[i]
, names(df_elem)
, ignore.case = TRUE)
}
# Create data frame for CCES responses
df_cces_responses <- df_elem
# Rename columns that refer to CCES questions
names(df_cces_responses)[v_cces_columns] <- df_cces_questions$COLUMN_HEADER[1:cces_question_cnt]
# Keep columns need for CCES data
df_cces_responses <- subset(df_cces_responses
, select = c(1, 2 , v_cces_columns, 49, 50, 51))
# Re-code missing data
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[is.na(x)] <- "NR"; x})
# Re-code question responses
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "No, never"] <- 1; x})
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "Yes, some of the time"] <- 2; x})
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "Yes, most of the time"] <- 3; x})
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "Yes, all of the time"] <- 4; x})
# Re-code grade level
df_cces_responses <- apply(df_cces_responses, 2, function(x) {x[x == "5th grade"] <- "05"; x})
# Convert to data frame
df_cces_responses <- as.data.frame(df_cces_responses
, stringsAsFactors = FALSE)
# Re-code timestamp to MM/DD/YYYY
df_cces_responses$RESPONSE_DATE = ""
for (i in 1:length(df_cces_responses$Timestamp)){
# Find position of space between date and time
pos_space <- regexpr(" ", df_elem$Timestamp[i], fixed = TRUE)
# Extract date
df_cces_responses$RESPONSE_DATE[i] <- substring(df_elem$Timestamp[i], 1, pos_space - 1)
}
# Clean up
rm(i, pos_space)
#--------------------------------------------------
# Join SSIDs to survey responses
#--------------------------------------------------
# Drop unecessary coluns from SSID data frame
df_ssid <- subset(df_ssid
, select = c("Email", "SSID"))
# Rename email address column from responses data
names(df_cces_responses)[names(df_cces_responses)=="Email Address"] <- "Email"
# Join SSIDs using email address
df_cces_responses <- merge(df_cces_responses
, df_ssid
, by = "Email"
, all.x = TRUE)
#--------------------------------------------------
# Move columns to fit CCESS file spec from CORE dictionary
#--------------------------------------------------
#--------------------------------------------------
# Move columns to fit CCESS file spec from CORE dictionary
#--------------------------------------------------
# Create empty data frame
df_cces_upload <- data.frame(matrix(NA
, nrow = length(df_cces_responses$Email)
, ncol = length(df_cces_dictionary$COLUMN_HEADER)))
# Name columns
names(df_cces_upload) <- c(df_cces_dictionary$COLUMN_HEADER)
# Fill in data
df_cces_upload$SURVEY_CODE <- "CC_ES_1718"
df_cces_upload$RESPONDENT_ID <- df_cces_responses$SSID
df_cces_upload$RESPONDENT_GRADE <- df_cces_responses$`What grade are you in?`
df_cces_upload$SCHOOL_CODE <- "0124172"
# Find matching columns
v_match_col <- match(names(df_cces_upload), names(df_cces_responses))
# For matching columns, copy data from responses data frame to upload data frame
for (i in 1:length(v_match_col)){
ifelse(is.na(v_match_col[i])
, print("No Match")
, df_cces_upload[, i] <- df_cces_responses[, v_match_col[i]])
}
rm(i, v_match_col)
# Create temp vector to store data
v_temp <- df_cces_upload[, 39]
# Re-code values in data frame
df_cces_upload[v_temp == 1, 39] <- 4
df_cces_upload[v_temp == 2, 39] <- 3
df_cces_upload[v_temp == 3, 39] <- 2
df_cces_upload[v_temp == 4, 39] <- 1
# Flip numeric responses for negatively phrased questions
for (i in 39:44){
# Create temp vector to store data
v_temp <- df_cces_upload[, i]
# Re-code values in data frame
df_cces_upload[v_temp == 1, i] <- 4
df_cces_upload[v_temp == 2, i] <- 3
df_cces_upload[v_temp == 3, i] <- 2
df_cces_upload[v_temp == 4, i] <- 1
}
# Export to CSV
write.csv(df_cces_upload
, "C:/Data/CORE/Uploading/CCES/CCES_1718_0124172.csv"
, row.names = FALSE
, na = "")
getwd()
# Import CDE enrollment data files from 2007-2008 school year and beyond into a data frame
# # Clear console
# cat("\014")
#
# # Clear memory
# rm(list=ls())
# gc()
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Gitbhub/SimilarSchoolComparison")
setwd("C:/Github/SimilarSchoolComparison")
# Import CDE enrollment data files from 2007-2008 school year and beyond into a data frame
# # Clear console
# cat("\014")
#
# # Clear memory
# rm(list=ls())
# gc()
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Enrollment")
# Create list to store data frames
l_dataframes <- list()
# List of files in the working folder
l_files <- dir()
# Import CDE enrollment data files from 2007-2008 school year and beyond into a data frame
# # Clear console
# cat("\014")
#
# # Clear memory
# rm(list=ls())
# gc()
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/Enrollment")
# Create list to store data frames
l_dataframes <- list()
# List of files in the working folder
l_files <- dir()
# Import California Department of Education (CDE) enrollment data files
#
# Date files and file specification available here: https://www.cde.ca.gov/ds/sd/sd/filesenr.asp
#
# This script will work for enrollment files from 2007-08 school year and later
#
# This script imports enrollment data files from individual school years and combines them into a single data frame
# # Clear console
# cat("\014")
#
# # Clear memory
# rm(list=ls())
# gc()
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/Enrollment")
# Create list to store data frames
l_dataframes <- list()
# List of files in the working folder
l_files <- dir()
# Import each file into a data frame
for (i in 1:length(l_files)) {
l_dataframes[[i]] <- l_files[i] %>%
# Import file
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 17))) %>%
# Parse school year from file name
mutate(FILE_NAME = l_files[i])
}
# Create single data frame
df_enr <- bind_rows(l_dataframes)
# Clean up
rm(i, l_dataframes, l_files)
gc()
# Add variables
df_enr <- df_enr %>%
# Add school year variable
mutate(SCHOOL_YEAR = substring(FILE_NAME
, 5
, 8)) %>%
# Drop file name
dplyr::select(-FILE_NAME) %>%
# Add ethnic text variable
mutate(ETHNIC_TXT = case_when(
ETHNIC == "0" ~ "Not Reported"
, ETHNIC == "1" ~ "American Indian or Alaska Native"
, ETHNIC == "2" ~ "Asian"
, ETHNIC == "3" ~ "Pacific Islander"
, ETHNIC == "4" ~ "Filipino"
, ETHNIC == "5" ~ "Hispanic or Latino"
, ETHNIC == "6" ~ "African American"
, ETHNIC == "7" ~ "White"
, ETHNIC == "9" ~ "Two or More Races"))
# Import California Department of Education (CDE) English Leaners (EL) data files
#
# Date files and file specification available here: https://www.cde.ca.gov/ds/sd/sd/fileselsch.asp
#
# This script imports EL data files from individual school years and combines them into a single data frame
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/EnglishLearners")
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/EnglishLearners")
#Clear console
cat("\014")
#Clear memory
rm(list=ls())
gc()
# Import California Department of Education (CDE) English Leaners (EL) data files
#
# Date files and file specification available here: https://www.cde.ca.gov/ds/sd/sd/fileselsch.asp
#
# This script imports EL data files from individual school years and combines them into a single data frame
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/EnglishLearners")
# Create list to store data frames
l_dataframes <- list()
# List of files in the working folder
l_files <- dir()
# Import each file into a data frame
for (i in 1:length(l_files)) {
l_dataframes[[i]] <- l_files[i] %>%
# Import file
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 17))) %>%
# Parse school year from file name
mutate(FILE_NAME = l_files[i])
}
df_test <- "elsch1516.txt" %>%
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 17)))
df_test <- "elsch1617.txt" %>%
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 17)))
df_test <- "elsch1617.txt" %>%
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 15)))
rm(df_test)
# Import each file into a data frame
for (i in 1:length(l_files)) {
l_dataframes[[i]] <- l_files[i] %>%
# Import file
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 15))) %>%
# Parse school year from file name
mutate(FILE_NAME = l_files[i])
}
#Clear console
cat("\014")
#Clear memory
rm(list=ls())
gc()
# Import California Department of Education (CDE) English Leaners (EL) data files
#
# Date files and file specification available here: https://www.cde.ca.gov/ds/sd/sd/fileselsch.asp
#
# This script imports EL data files from individual school years and combines them into a single data frame
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/EnglishLearners")
# Create list to store data frames
l_dataframes <- list()
# List of files in the working folder
l_files <- dir()
# Import each file into a data frame
for (i in 1:length(l_files)) {
l_dataframes[[i]] <- l_files[i] %>%
# Import file
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 15))) %>%
# Parse school year from file name
mutate(FILE_NAME = l_files[i])
}
# Create single data frame
df_enr <- bind_rows(l_dataframes)
# Clean up
rm(i, l_dataframes, l_files)
gc()
#Clear console
cat("\014")
#Clear memory
rm(list=ls())
gc()
# Import California Department of Education (CDE) English Leaners (EL) data files
#
# Date files and file specification available here: https://www.cde.ca.gov/ds/sd/sd/fileselsch.asp
#
# This script imports EL data files from individual school years and combines them into a single data frame
# Install/load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, tidyr, dplyr)
# Set working directory
setwd("C:/Github/SimilarSchoolComparison/Data/EnglishLearners")
# Create list to store data frames
l_dataframes <- list()
# List of files in the working folder
l_files <- dir()
# Import each file into a data frame
for (i in 1:length(l_files)) {
l_dataframes[[i]] <- l_files[i] %>%
# Import file
read.csv(header = TRUE
, sep = "\t"
, colClasses = c(rep("character", 6)
, rep("integer", 15))) %>%
# Parse school year from file name
mutate(FILE_NAME = l_files[i])
}
# Create single data frame
df_el <- bind_rows(l_dataframes)
# Clean up
rm(i, l_dataframes, l_files)
gc()
# Add variables
df_test <- df_el %>%
# Extract year from file name
mutate(SCHOOL_YEAR = substring(FILE_NAME
, 6
, 7))
# Add variables
df_test <- df_el %>%
# Extract year from file name
mutate(SCHOOL_YEAR = substring(FILE_NAME
, 6
, 7)) %>%
# Translate school year
mutate(SCHOOL_YEAR = case_when(
SCHOOL_YEAR == "18" ~ "17-18"
SCHOOL_YEAR == "17" ~ "16-17"
SCHOOL_YEAR == "16" ~ "15-16"
))
# Add variables
df_test <- df_el %>%
# Extract year from file name
mutate(SCHOOL_YEAR = substring(FILE_NAME
, 6
, 7)) %>%
# Translate school year
mutate(SCHOOL_YEAR = case_when(
SCHOOL_YEAR == "18" ~ "17-18"
SCHOOL_YEAR == "17" ~ "16-17"
SCHOOL_YEAR == "16" ~ "15-16"
))
# Add variables
df_test <- df_el %>%
# Extract year from file name
mutate(SCHOOL_YEAR = substring(FILE_NAME
, 6
, 7)) %>%
# Translate school year
mutate(SCHOOL_YEAR = case_when(
SCHOOL_YEAR == "18" ~ "17-18"
SCHOOL_YEAR == "17" ~ "16-17"
SCHOOL_YEAR == "16" ~ "15-16"
))
# Add variables
df_test <- df_el %>%
# Extract year from file name
mutate(SCHOOL_YEAR = substring(FILE_NAME
, 6
, 7)) %>%
# Translate school year
mutate(SCHOOL_YEAR = case_when(
SCHOOL_YEAR == "18" ~ "17-18"
SCHOOL_YEAR == "17" ~ "16-17"
SCHOOL_YEAR == "16" ~ "15-16"
))
# Add variables
df_test <- df_el %>%
# Extract year from file name
mutate(SCHOOL_YEAR = substring(FILE_NAME
, 6
, 7)) %>%
# Translate school year
mutate(SCHOOL_YEAR = case_when(
SCHOOL_YEAR == "18" ~ "17-18"
, SCHOOL_YEAR == "17" ~ "16-17"
, SCHOOL_YEAR == "16" ~ "15-16"
))
# Add variables
df_test <- df_el %>%
# Extract year from file name
mutate(SCHOOL_YEAR = substring(FILE_NAME
, 6
, 7)) %>%
# Translate school year
mutate(SCHOOL_YEAR = case_when(
SCHOOL_YEAR == "18" ~ "17-18"
, SCHOOL_YEAR == "17" ~ "16-17"
, SCHOOL_YEAR == "16" ~ "15-16"
)) %>%
# Drop file name
dplyr::select(-FILE_NAME)
